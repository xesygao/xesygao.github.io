<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>日志处理</title>
      <link href="/2019/03/05/%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/"/>
      <url>/2019/03/05/%E6%97%A5%E5%BF%97%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="Filebeat"><a href="#Filebeat" class="headerlink" title="Filebeat"></a>Filebeat</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.elastic.co/downloads/beats/filebeat" target="_blank" rel="noopener">下载</a><br>目录结构<br><img src="https://ws1.sinaimg.cn/large/c6073458gy1g0rxzqub5hj20lq01u3yj.jpg" alt="目录结构"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改配置文件使其支持传输日志到Logstash</p><pre><code class="yaml">filebeat.inputs:- type: log  enabled: true  paths:    - /var/log/*.log#默认启用的是elasticsearch，需将其配置注释掉output.logstash:  # The Logstash hosts  hosts: [&quot;localhost:5044&quot;]</code></pre><p>在本例中，会读取log目录下，以.log结尾的文件。如果路径配置为/var/log/*/*.log，则会读取log子目录底下以.log结尾的文件，而不会读取log目录下log文件</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><pre><code class="bash">./filebeat -e -c filebeat.yml -d &quot;publish&quot;</code></pre><h2 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a>Logstash</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p><a href="https://www.elastic.co/downloads/logstash" target="_blank" rel="noopener">下载</a><br>目录结构<br><img src="https://ws1.sinaimg.cn/large/c6073458gy1g0rzghbm5cj20mh02cglo.jpg" alt="目录结构"></p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>将config/logstash-sample.conf复制一份作为启用的配置文件</p><pre><code class="bash">cd configcp logstash-sample.conf my-config.conf</code></pre><pre><code>input {  beats {    port =&gt; 5044  }}filter {    grok {        match =&gt; { &quot;message&quot; =&gt; [&quot;(?&lt;date&gt;(\d*[./-]\d*[./-]\d* \d*:\d*:\d*[.,][0-9]+)) +%{LOGLEVEL:logLevel} \d+ --- \[.*\] (?&lt;class&gt;([a-z|A-Z|0-9|.]+)) +: 请求方法：(?&lt;method&gt;([a-z|A-Z|0-9|.]+))，请求参数：(?&lt;request&gt;(.*))&quot;]}    }    mutate {        remove_field =&gt; &quot;message&quot;    }}output {    stdout { codec =&gt; rubydebug }    file {        path =&gt; &quot;./aaa.log&quot;    }}</code></pre><h3 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h3><pre><code class="bash">#测试配置文件是否可用bin/logstash -f first-pipeline.conf --config.test_and_exit#启动logstash，当配置文件修改时自动重新加载bin/logstash -f first-pipeline.conf --config.reload.automatic</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Filebeat -Logstash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Finchley - Eureka配置详解</title>
      <link href="/2019/02/28/Spring-Cloud-Finchley-Eureka%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/02/28/Spring-Cloud-Finchley-Eureka%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h2><p>原始配置文件说明在<code>spring-cloud-netflix-eureka-client-2.0.0.RELEASE.jar!/META-INF/spring-configuration-metadata.json</code></p><h3 id="eureka-instance配置"><a href="#eureka-instance配置" class="headerlink" title="eureka.instance配置"></a>eureka.instance配置</h3><table><thead><tr><th>参数</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>eureka.instance.appname</td><td>注册到eureka的服务名</td><td>默认值unknown</td></tr><tr><td>eureka.instance.appGroupName</td><td>注册到eureka的服务组名</td><td>默认无</td></tr><tr><td>eureka.instance.instanceEnabledOnit</td><td>是否使实例一注册到eureka服务端就开始分担流量</td><td>默认false</td></tr><tr><td>eureka.instance.nonSecurePort</td><td>http端口</td><td>默认80</td></tr><tr><td>eureka.instance.securePort</td><td>https端口</td><td>默认443</td></tr><tr><td>eureka.instance.nonSecurePortEnabled</td><td>是否启用http</td><td>默认true</td></tr><tr><td>eureka.instance.securePortEnabled</td><td>是否启用https</td><td>默认false</td></tr><tr><td>eureka.instance.leaseRenewalIntervalInSeconds</td><td>心跳间隔时间</td><td>默认30(s)</td></tr><tr><td>eureka.instance.leaseExpirationDurationInSeconds</td><td>服务中心删除此服务实例的等待时间(秒为单位),时间间隔为最后一次服务中心接受到的心跳时间与当前时间的时间差</td><td>默认90(s)</td></tr><tr><td>eureka.instance.virtualHostName</td><td>该实例的虚拟主机名称(http)</td><td>默认值”unknown”</td></tr><tr><td>eureka.instance.instanceId</td><td>实例id</td><td>默认无，在同一个appName下该实例id唯一</td></tr><tr><td>eureka.instance.secureVirtualHostName</td><td>该实例的虚拟主机名称(https)</td><td>默认值”unknown”</td></tr><tr><td>eureka.instance.aSGName</td><td></td><td></td></tr><tr><td>eureka.instance.metadataMap</td><td>自定义的元数据</td><td>默认无，配置例子:eureka.instance.metadataMap.dataname=datavalue</td></tr><tr><td>eureka.instance.dataCenterInfo</td><td>该实例所在数据中心信息</td><td>默认无</td></tr><tr><td>eureka.instance.ipAddress</td><td>该实例ip地址</td><td>默认无</td></tr><tr><td>eureka.instance.preferIpAddress</td><td>是否优先使用ip地址</td><td>默认false</td></tr><tr><td>eureka.instance.statusPageUrlPath</td><td>该实例的状态呈现url,相对路径</td><td>默认值”\status”</td></tr><tr><td>eureka.instance.statusPageUrl</td><td>该实例的状态呈现url,绝对路径</td><td>默认无</td></tr><tr><td>eureka.instance.homePageUrlPath</td><td>该实例的主页url,相对路径</td><td>默认”/“</td></tr><tr><td>eureka.instance.homePageUrl</td><td>该实例的主页url,绝对路径</td><td>默认无</td></tr><tr><td>eureka.instance.healthCheckUrlPath</td><td>该实例健康检查url,相对路径</td><td>默认”/health”</td></tr><tr><td>eureka.instance.healthCheckUrl</td><td>该实例健康检查url,绝对路径</td><td>默认无</td></tr><tr><td>eureka.instance.secureHealthCheckUrl</td><td>该实例的安全健康检查url,绝对路径</td><td></td></tr><tr><td>eureka.instance.namespace</td><td>该服务实例的命名空间,用于查找属性</td><td>默认值”eureka”,在springcloud中被忽略</td></tr><tr><td>eureka.instance.hostname</td><td>注册主机名</td><td>默认无</td></tr><tr><td>eureka.instance.initialStatus</td><td>注册到eureka的初始状态</td><td>默认无,例如:(UP、DOWN、STARTING、OUT_OF_SERVICE、UNKNOW)</td></tr><tr><td>eureka.instance.defaultAddressResolutionOrder</td><td>默认的地址解析顺序</td><td>默认值”[]”</td></tr><tr><td>eureka.instance.environment</td><td>该实例的环境配置</td><td>默认无,如果不配置，则为test</td></tr></tbody></table><h3 id="eureka-client配置"><a href="#eureka-client配置" class="headerlink" title="eureka.client配置"></a>eureka.client配置</h3><table><thead><tr><th>参数</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>eureka.client.propertyResolver</td><td></td><td></td></tr><tr><td>eureka.client.enabled</td><td>是否启用eureka客户端</td><td>默认值true</td></tr><tr><td>eureka.client.transport</td><td></td><td></td></tr><tr><td>eureka.client.registryFetchIntervalSeconds</td><td>从eureka服务器注册表中获取注册信息的时间间隔(s)</td><td>默认为30秒</td></tr><tr><td>eureka.client.instanceInfoReplicationIntervalSeconds</td><td>复制实例变化信息到eureka服务器的时间间隔(s)</td><td>默认为30秒</td></tr><tr><td>eureka.client.initialInstanceInfoReplicationIntervalSeconds</td><td>最初复制实例信息到eureka服务器所需的时间间隔(s)</td><td>默认为40秒</td></tr><tr><td>eureka.client.eurekaServiceUrlPollIntervalSeconds</td><td>询问Eurekaservice url信息变化的时间间隔(s)</td><td>默认为300(s)</td></tr><tr><td>eureka.client.proxyHost</td><td>eureka服务的代理主机</td><td>默认无</td></tr><tr><td>eureka.client.proxyPort</td><td>eureka服务的代理端口</td><td>默认无</td></tr><tr><td>eureka.client.proxyUserName</td><td>eureka服务的代理用户名</td><td>默认无</td></tr><tr><td>eureka.client.proxyPassword</td><td>eureka服务的代理密码</td><td>默认无</td></tr><tr><td>eureka.client.eurekaServerReadTimeoutSeconds</td><td>eureka服务读取超时前等待的时间</td><td>默认为8秒</td></tr><tr><td>eureka.client.eurekaServerConnectTimeoutSeconds</td><td>eureka服务连接超时前等待的时间</td><td>默认为5秒</td></tr><tr><td>eureka.client.backupRegistryImpl</td><td>实现了BackupRegistry接口的类名</td><td>该类作为eureka客户端第一次获取注册信息时的失败回退选项</td></tr><tr><td>eureka.client.eurekaServerTotalConnections</td><td>eureka客户端可连接eureka服务端连接总数</td><td>默认是200</td></tr><tr><td>eureka.client.eurekaServerTotalConnectionsPerHost</td><td>eureka客户端可连接eureka服务端主机总数</td><td>默认是50</td></tr><tr><td>eureka.client.eurekaServerURLContext</td><td>eureka注册中心路径</td><td>默认无。该选项在eureka.client.useDnsForFetchingServiceUrls值为true时需配置，用于构造service url</td></tr><tr><td>eureka.client.eurekaServerPort</td><td>eureka服务端口</td><td>该选项在eureka.client.useDnsForFetchingServiceUrls值为true时需配置，用于构造service url</td></tr><tr><td>eureka.client.eurekaServerDNSName</td><td>dns名</td><td>默认值无，该选项在eureka.client.useDnsForFetchingServiceUrls值为true时需配置</td></tr><tr><td>eureka.client.region</td><td>当前实例所属region</td><td>默认值”us-east-1”</td></tr><tr><td>eureka.client.eurekaConnectionIdleTimeoutSeconds</td><td>到eureka服务端的http连接关闭前允许闲置时间</td><td>默认值30(s)</td></tr><tr><td>eureka.client.registryRefreshSingleVipAddress</td><td></td><td></td></tr><tr><td>eureka.client.heartbeatExecutorThreadPoolSize</td><td>初始心跳执行器(heartbeatExecutor)线程池大小</td><td>默认值2</td></tr><tr><td>eureka.client.heartbeatExecutorExponentialBackOffBound</td><td>心跳执行器指数退避策略相关属性，其值为重试延迟的最大倍数</td><td>默认为10</td></tr><tr><td>eureka.client.cacheRefreshExecutorThreadPoolSize</td><td>初始缓存刷新执行器(cacheRefreshExecutor)线程池大小</td><td>默认值2</td></tr><tr><td>eureka.client.cacheRefreshExecutorExponentialBackOffBound</td><td>缓存刷新执行器指数退避策略相关属性，其值为重试延迟的最大倍数</td><td>默认为10。获取注册信息的操作也是一个异步任务，每隔30秒执行一次（通过eureka.client.registryFetchIntervalSeconds配置），如果操作失败，也是以2的指数形式延长重试时间，直到达到eureka.client.registryFetchIntervalSeconds * eureka.client.cacheRefreshExecutorExponentialBackOffBound 这个上限，之后一直以这个上限值作为重试间隔，直至重新获取到注册信息，并且重新尝试获取注册信息的次数是不受限制的。 </td></tr><tr><td>eureka.client.serviceUrl</td><td>指定服务注册中心地址</td><td>如果服务注册中心为高可用集群时，多个注册中心地址以逗号分隔</td></tr><tr><td>eureka.client.gZipContent</td><td>是否开启gzip压缩</td><td>默认true，可以减少网络流量</td></tr><tr><td>eureka.client.useDnsForFetchingServiceUrls</td><td>是否通过dns获取eureka服务端列表</td><td>默认值false</td></tr><tr><td>eureka.client.registerWithEureka</td><td>是否注册到eureka服务端</td><td>默认true</td></tr><tr><td>eureka.client.preferSameZoneEureka</td><td>优先选择同一机房实例</td><td>默认true</td></tr><tr><td>eureka.client.logDeltaDiff</td><td>是否记录eureka客户端与服务端之间注册信息的差异</td><td>默认false</td></tr><tr><td>eureka.client.disableDelta</td><td>是否禁用增量更新从而获取全量注册信息</td><td>默认值为false</td></tr><tr><td>eureka.client.fetchRemoteRegionsRegistry</td><td>一串由”,”分隔的rigion列表，eureka客户端从这些rigion获取注册信息</td><td>配置了该项则需要配置eureka.client.availabilityZones</td></tr><tr><td>eureka.client.availabilityZones</td><td>当前实例所属rigion可用zone列表</td><td>rigion和zone是AWS中的概念，rigion相当于一个区域，zone相当于一个机房</td></tr><tr><td>eureka.client.filterOnlyUpInstances</td><td>是否只获取状态为”UP”的实例</td><td>默认true</td></tr><tr><td>eureka.client.fetchRegistry</td><td>是否从eureka服务端获取注册信息</td><td>默认true</td></tr><tr><td>eureka.client.dollarReplacement</td><td>在eureka服务端序列化/反序列化信息时替换$的字符串</td><td>默认值为_-</td></tr><tr><td>eureka.client.escapeCharReplacement</td><td>在eureka服务端序列化/反序列化信息时替换_的字符串</td><td>默认值__</td></tr><tr><td>eureka.client.allowRedirects</td><td>是否允许将请求重定向到另一个服务/集群</td><td>默认值false</td></tr><tr><td>eureka.client.onDemandUpdateStatusChange</td><td>如果设置为true，则通过ApplicationInfoManager进行的本地状态更新将触发对远程eureka服务器的按需(但限速)注册/更新</td><td>默认true</td></tr><tr><td>eureka.client.encoderName</td><td>编码器名称</td><td>临时配置，当最新编解码器稳定时该配置项将被移除</td><td></td></tr><tr><td>eureka.client.decoderName</td><td>解码器名称</td><td>临时配置，当最新编解码器稳定时该配置项将被移除</td></tr><tr><td>eureka.client.clientDataAccept</td><td>EurekaAccept name for client data accept</td><td></td></tr><tr><td>eureka.client.shouldUnregisterOnShutdown</td><td>是否在关闭时取消注册</td><td>默认true</td></tr><tr><td>eureka.client.shouldEnforceRegistrationAtInit</td><td>是否在初始化阶段强行注册到eureka server</td><td>默认false</td></tr><tr><td>eureka.client.order</td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Finchley - Eureka开启密码认证</title>
      <link href="/2019/02/28/Spring-Cloud-Finchley-Eureka%E5%BC%80%E5%90%AF%E5%AF%86%E7%A0%81%E8%AE%A4%E8%AF%81/"/>
      <url>/2019/02/28/Spring-Cloud-Finchley-Eureka%E5%BC%80%E5%90%AF%E5%AF%86%E7%A0%81%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h3 id="eureka-server配置"><a href="#eureka-server配置" class="headerlink" title="eureka-server配置"></a>eureka-server配置</h3><p>在pom文件中加入spring-boot-starter-security依赖</p><pre><code class="xml">    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;    &lt;/dependency&gt;</code></pre><p>在application.yml中配置用户名密码</p><pre><code class="yml">spring:  security:    user:      name: eurekav      password: eureka2018</code></pre><p>默认情况下Spring Security会要求每一个请求发送一个可用的CSRF token到应用。Eureka clients通常没有持有跨站请求伪造(cross site request forgery (CSRF)) token，因此需要禁用/eureka/**端CSRF。代码如下：</p><pre><code class="java">@EnableWebSecuritypublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {    @Override    protected void configure(HttpSecurity http) throws Exception {        http.csrf().ignoringAntMatchers(&quot;/eureka/**&quot;);        //继续执行原有流程，使认证生效        super.configure(http);    }}</code></pre><h3 id="eureka-client配置"><a href="#eureka-client配置" class="headerlink" title="eureka-client配置"></a>eureka-client配置</h3><pre><code class="yml">spring:  security:    user:      name: eureka      password: eureka2018eureka:  client:    serviceUrl:      defaultZone: http://${spring.security.user.name}:${spring.security.user.password}@${eureka.instance.hostname}:${server.port}/eureka/</code></pre><p>启动服务端和客户端，此时访问服务端就会要求认证<br><img src="https://ws1.sinaimg.cn/large/c6073458gy1fw8qu8cbzjj20fg05ujrf.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloud </tag>
            
            <tag> Eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canal配置详解</title>
      <link href="/2019/02/28/Canal%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
      <url>/2019/02/28/Canal%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Canal配置文件详解"><a href="#Canal配置文件详解" class="headerlink" title="Canal配置文件详解"></a>Canal配置文件详解</h1><h2 id="配置目录结构"><a href="#配置目录结构" class="headerlink" title="配置目录结构"></a>配置目录结构</h2><p><img src="https://ws1.sinaimg.cn/large/c6073458gy1fuzk4gpzmuj20h205cgm0.jpg" alt="配置文件目录结构"></p><h2 id="Canal-Server配置文件canal-properties"><a href="#Canal-Server配置文件canal-properties" class="headerlink" title="Canal Server配置文件canal.properties"></a>Canal Server配置文件canal.properties</h2><h3 id="common参数定义"><a href="#common参数定义" class="headerlink" title="common参数定义"></a>common参数定义</h3><table><thead><tr><th>参数名字</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>canal.id</td><td>每个canal server实例的唯一标识，暂无实际意义</td><td>1</td></tr><tr><td>canal.ip</td><td>canal server绑定的本地IP信息，如果不配置，默认选择一个本机IP进行启动服务</td><td>无</td></tr><tr><td>canal.port</td><td>canal server提供socket服务的端口</td><td>11111</td></tr><tr><td>canal.metrics.pull.port</td><td>监控接口端口(配合Prometheus使用)</td><td>11112</td></tr><tr><td>canal.zkServers</td><td>canal server链接zookeeper集群的链接信息(用来实现HA)</td><td>无</td></tr><tr><td>canal.zookeeper.flush.period</td><td>canal持久化数据到zookeeper上的更新频率，单位毫秒</td><td>1000</td></tr><tr><td>canal.withoutNetty</td><td>是否关闭server端的netty服务</td><td>false</td></tr><tr><td>canal.file.data.dir</td><td>flush meta cursor/parse position to file。记录消费位点到文件，当使用spring/file-instance.xml配置文件时</td><td>${canal.conf.dir}</td></tr><tr><td>canal.file.flush.period</td><td>canal持久化数据到文件上的更新频率，单位毫秒</td><td>1000</td></tr></tbody></table><h3 id="instance参数定义"><a href="#instance参数定义" class="headerlink" title="instance参数定义"></a>instance参数定义</h3><table><thead><tr><th>参数名字</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>canal.instance.memory.buffer.size</td><td>canal内存store中可缓存buffer记录数，需要为2的指数</td><td>16384</td></tr><tr><td>canal.instance.memory.buffer.memunit</td><td>内存记录的单位大小，默认1KB，和buffer.size组合决定最终的内存使用大小</td><td>1024</td></tr><tr><td>canal.instance.memory.batch.mode</td><td>canal内存store中数据缓存模式<br>1. ITEMSIZE :根据buffer.size进行限制，只限制记录的数量式<br>2. MEMSIZE : 根据buffer.size  * buffer.memunit的大小，限制缓存记录的大小</td><td>MEMSIZE</td></tr><tr><td>canal.instance.detecting.enable</td><td>是否开启心跳检查</td><td>false</td></tr><tr><td>canal.instance.detecting.sql</td><td>心跳检查sql</td><td>select 1</td></tr><tr><td>canal.instance.detecting.interval.time</td><td>心跳检查频率，单位秒</td><td>3</td></tr><tr><td>canal.instance.detecting.retry.threshold</td><td>心跳检查失败重试次数</td><td>3</td></tr><tr><td>canal.instance.detecting.heartbeatHaEnable</td><td>心跳检查失败后，是否开启自动mysql自动切换<br>说明：比如心跳检查失败超过阀值后，如果该配置为true，canal就会自动链到mysql备库获取binlog数据</td><td>false</td></tr><tr><td>canal.instance.transaction.size</td><td>最大事务完整解析的长度支持。超过该长度后，一个事务可能会被拆分成多次提交到canal store中，无法保证事务的完整可见性</td><td>1024</td></tr><tr><td>canal.instance.fallbackIntervalInSeconds</td><td>canal发生mysql切换时，在新的mysql库上查找binlog时需要往前查找的时间，单位秒<br>说明：mysql主备库可能存在解析延迟或者时钟不统一，需要回退一段时间，保证数据不丢</td><td>60</td></tr><tr><td>canal.instance.network.receiveBufferSize</td><td>网络链接参数，SocketOptions.SO_RCVBUF</td><td>16384</td></tr><tr><td>canal.instance.network.sendBufferSize</td><td>网络链接参数，SocketOptions.SO_SNDBUF</td><td>16384</td></tr><tr><td>canal.instance.network.soTimeout</td><td>网络链接参数，SocketOptions.SO_TIMEOUT</td><td>30</td></tr><tr><td>canal.instance.filter.druid.ddl</td><td>是否使用druid处理所有的ddl解析来获取库和表名</td><td>true</td></tr><tr><td>canal.instance.filter.query.dcl</td><td>是否忽略ddl语句</td><td>false</td></tr><tr><td>canal.instance.filter.query.dml</td><td>是否忽略ddl语句</td><td>false</td></tr><tr><td>canal.instance.filter.query.ddl</td><td>是否忽略ddl语句</td><td>false</td></tr><tr><td>canal.instance.filter.table.error</td><td>是否忽略binlog表结构获取失败的异常<br>(主要解决回溯binlog时,对应表已被删除或者表结构和binlog不一致的情况)</td><td>false</td></tr><tr><td>canal.instance.filter.rows</td><td>是否忽略dml的数据变更事件<br>(主要针对用户只订阅ddl/dcl的操作)</td><td>false</td></tr><tr><td>canal.instance.filter.transaction.entry</td><td>是否忽略事务头和尾,比如针对写入kakfa的消息时，不需要写入TransactionBegin/Transactionend事件</td><td>true</td></tr><tr><td>canal.instance.binlog.format</td><td>支持的binlog/format格式列表<br>(otter会有支持format格式限制)</td><td>ROW,STATEMENT,MIXED</td></tr><tr><td>canal.instance.binlog.image</td><td>支持的binlog/image格式列表<br>(otter会有支持format格式限制)</td><td>FULL,MINIMAL,NOBLOB</td></tr><tr><td>canal.instance.get.ddl.isolation</td><td>ddl语句是否单独一个batch返回<br>(比如下游dml/ddl如果做batch内无序并发处理,会导致结构不一致)</td><td>false</td></tr><tr><td>canal.instance.parser.parallel</td><td>是否开启binlog并行解析模式<br>(串行解析资源占用少,但性能有瓶颈, 并行解析可以提升近2.5倍+)</td><td>true</td></tr><tr><td>canal.instance.parser.parallelThreadSize</td><td>并行线程数，默认为可用处理器数的60%。建议不超过Runtime.getRuntime().availableProcessors()</td><td>16</td></tr><tr><td>canal.instance.parser.parallelBufferSize</td><td>binlog并行解析的异步ringbuffer队列<br>(必须为2的指数)</td><td>256</td></tr><tr><td>canal.instance.tsdb.enable</td><td>是否开启tablemeta的tsdb能力</td><td>true</td></tr><tr><td>canal.instance.tsdb.dir</td><td>主要针对h2-tsdb.xml时对应h2文件的存放目录,默认为conf/xx/h2.mv.db</td><td>${canal.file.data.dir:../conf}/${canal.instance.destination:}</td></tr><tr><td>canal.instance.tsdb.url</td><td>jdbc url的配置<br>(h2的地址为默认值，如果是mysql需要自行定义)</td><td>jdbc:h2:${canal.instance.tsdb.dir}/h2;CACHE_SIZE=1000;MODE=MYSQL;</td></tr><tr><td>canal.instance.tsdb.dbUsername</td><td>tsdb用户名</td><td>canal</td></tr><tr><td>canal.instance.tsdb.dbPassword</td><td>tsdb密码</td><td>canal</td></tr><tr><td>canal.instance.tsdb.spring.xml</td><td>全局的tsdb配置方式的组件文件</td><td>classpath:spring/tsdb/h2-tsdb.xml或者classpath:spring/tsdb/mysql-tsdb.xml</td></tr><tr><td>canal.instance.rds.accesskey</td><td>aliyun账号的ak信息<br> (如果不需要在本地binlog超过18小时被清理后自动下载oss上的binlog，可以忽略该值)</td><td>无</td></tr><tr><td>canal.instance.rds.secretkey</td><td>aliyun账号的sk信息<br>(如果不需要在本地binlog超过18小时被清理后自动下载oss上的binlog，可以忽略该值)</td><td>无</td></tr><tr><td>canal.destinations</td><td>当前server上部署的instance列表，多个实例用逗号分隔</td><td>无</td></tr><tr><td>canal.conf.dir</td><td>conf/目录所在的路径</td><td>../conf</td></tr><tr><td>canal.auto.scan</td><td>开启instance自动扫描<br>如果配置为true，canal.conf.dir目录下的instance配置变化会自动触发：<br>a. instance目录新增：触发instance配置载入，lazy为true时则自动启动<br>b. instance目录删除：卸载对应instance配置，如已启动则进行关闭<br>c. instance.properties文件变化：reload instance配置，如已启动自动进行重启操作</td><td>true</td></tr><tr><td>canal.auto.scan.interval</td><td>instance自动扫描的间隔时间，单位秒</td><td>5</td></tr><tr><td>canal.instance.global.mode</td><td>全局配置加载方式</td><td>spring </td></tr><tr><td>canal.instance.global.lazy</td><td>全局lazy模式</td><td>false</td></tr><tr><td>canal.instance.global.manager.address</td><td>全局的manager配置方式的链接信息</td><td>127.0.0.1:1099</td></tr><tr><td>canal.instance.global.spring.xml</td><td>全局的spring配置方式的组件文件</td><td>classpath:spring/memory-instance.xml或者classpath:spring/file-instance.xml或者classpath:spring/default-instance.xml</td></tr></tbody></table><p><br><br>在canal.properties定义了canal.destinations后，需要在canal.conf.dir对应的目录下建立同名的文件<br>比如：</p><blockquote><p>canal.destinations =IMMIG_200,IMMIG_201</p></blockquote><p> 这时需要创IMMIG_200和IMMIG_201两个目录，每个目录里各自有一份<code>instance.properties</code>.</p><h2 id="Canal-instance配置文件instance-properties"><a href="#Canal-instance配置文件instance-properties" class="headerlink" title="Canal instance配置文件instance.properties"></a>Canal instance配置文件instance.properties</h2><table><thead><tr><th>参数名字</th><th>参数说明</th><th>默认值</th></tr></thead><tbody><tr><td>canal.instance.mysql.slaveId</td><td>mysql集群配置中的serverId概念，需要保证和当前mysql集群中id唯一(v1.0.26+版本之后canal会自动生成，不需要手工指定)</td><td>无</td></tr><tr><td>canal.instance.gtidon</td><td>是否启用mysql gtid的订阅模式</td><td>true</td></tr><tr><td>canal.instance.master.address</td><td>mysql主库链接地址</td><td>127.0.0.1:3306</td></tr><tr><td>canal.instance.master.journal.name</td><td>mysql主库链接时起始的binlog文件</td><td>无</td></tr><tr><td>canal.instance.master.position</td><td>mysql主库链接时起始的binlog偏移量</td><td>无</td></tr><tr><td>canal.instance.master.timestamp</td><td>mysql主库链接时起始的binlog的时间戳</td><td>无</td></tr><tr><td>canal.instance.master.gtid</td><td>mysql主库链接时对应的gtid位点</td><td>无</td></tr><tr><td>canal.instance.rds.accesskey</td><td>aliyun账号的ak信息<br> (如果不需要在本地binlog超过18小时被清理后自动下载oss上的binlog，可以忽略该值)</td><td>无</td></tr><tr><td>canal.instance.rds.secretkey</td><td>aliyun账号的sk信息<br> (如果不需要在本地binlog超过18小时被清理后自动下载oss上的binlog，可以忽略该值)</td><td>无</td></tr><tr><td>canal.instance.rds.instanceId</td><td>aliyun rds对应的实例id信息<br>(如果不需要在本地binlog超过18小时被清理后自动下载oss上的binlog，可以忽略该值)</td><td>无</td></tr><tr><td>canal.instance.standby.address</td><td>mysql备库链接地址</td><td>无</td></tr><tr><td>canal.instance.standby.journal.name</td><td>mysql备库链接时起始的binlog文件</td><td>无</td></tr><tr><td>canal.instance.standby.position</td><td>mysql备库链接时起始的binlog偏移量</td><td>无</td></tr><tr><td>canal.instance.standby.timestamp</td><td>mysql备库链接时起始的binlog的时间戳</td><td>无</td></tr><tr><td>canal.instance.standby.gtid</td><td>mysql备库链接时对应的gtid位点</td><td>无</td></tr><tr><td>canal.instance.dbUsername</td><td>mysql数据库帐号</td><td>canal</td></tr><tr><td>canal.instance.dbPassword</td><td>mysql数据库密码</td><td>canal</td></tr><tr><td>canal.instance.connectionCharset</td><td>mysql 数据解析编码</td><td>UTF-8</td></tr><tr><td>canal.instance.filter.regex</td><td>mysql 数据解析关注的表，Perl正则表达式</td><td>.*\..*</td></tr><tr><td>canal.instance.filter.black.regex</td><td>mysql 数据解析表的黑名单</td><td>无</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canal服务端部署教程</title>
      <link href="/2019/02/28/Canal%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/"/>
      <url>/2019/02/28/Canal%E6%9C%8D%E5%8A%A1%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Canal服务端部署教程"><a href="#Canal服务端部署教程" class="headerlink" title="Canal服务端部署教程"></a>Canal服务端部署教程</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载所需版本的Canal：<a href="https://github.com/alibaba/canal/releases" target="_blank" rel="noopener">下载地址</a></p><p>本文使用版本为<code>canal.deployer-1.1.0</code>，接下来以部署2台基于Zookeeper HA模式Canal为例</p><p>解压下载的文件</p><pre><code class="bash">tar -xzf canal.deployer-1.1.0.tar.gz -C canal.deployer-1.1.0</code></pre><p><img src="https://ws1.sinaimg.cn/large/c6073458gy1fv6hzalpr9j20mo04b74j.jpg" alt="解压"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>进入conf目录(IMMIG_200,IMMIG_201是之后新建的，后面的文档会提到)</p><p><img src="https://ws1.sinaimg.cn/large/c6073458gy1fv6i3v3gtyj20ht02fwei.jpg" alt></p><h3 id="canal服务端配置文件修改"><a href="#canal服务端配置文件修改" class="headerlink" title="canal服务端配置文件修改"></a>canal服务端配置文件修改</h3><p>canal.properties为canal服务端全局配置文件<br>要修改的部分如下</p><table><thead><tr><th>配置项</th><th>值</th><th>备注</th></tr></thead><tbody><tr><td>canal.zkServers</td><td>172.16.40.201:2181,172.16.40.202:2181,172.16.40.203:2181</td><td>ZK服务地址，多个以英文逗号分隔</td></tr><tr><td>canal.destinations</td><td>IMMIG_200,IMMIG_201</td><td>Canal实例名称，多个实例用英文逗号分隔</td></tr><tr><td>canal.instance.global.spring.xml</td><td>classpath:spring/default-instance.xml</td><td>Zookeeper HA模式所需配置文件</td></tr><tr><td>canal.instance.parser.parallel</td><td>false</td><td>是否使用并行解析。在Canal1.1.0中并行解析+GTID模式有bug，会导致丢数据。暂时改用串行解析</td></tr><tr><td>canal.instance.filter.query.dcl</td><td>true</td><td>是否忽略dcl(数据库控制语言，包括GRANT,DENY,REVOKE等语句)</td></tr><tr><td>canal.instance.filter.query.ddl</td><td>true</td><td>是否忽略ddl(数据库定义语言，比如说：CREATE、ALTER、DROP等)</td></tr></tbody></table><h3 id="canal实例配置文件修改"><a href="#canal实例配置文件修改" class="headerlink" title="canal实例配置文件修改"></a>canal实例配置文件修改</h3><p>如上表配置了2个实例，则在conf目录下分别建立两个与实例同名文件夹。在两个文件夹内新建instance.properties文件</p><table><thead><tr><th>配置项</th><th>值</th><th>备注</th></tr></thead><tbody><tr><td>canal.instance.gtidon</td><td>true</td><td>是否开启GTID模式</td></tr><tr><td>canal.instance.master.address</td><td>172.16.40.200:3306</td><td>监控mysql master的IP地址</td></tr><tr><td>canal.instance.dbUsername</td><td>canal</td><td>mysql用户</td></tr><tr><td>canal.instance.dbPassword</td><td>canal@2018</td><td>mysql密码</td></tr><tr><td>canal.instance.connectionCharset</td><td>UTF-8</td><td>字符集</td></tr><tr><td>canal.instance.filter.regex</td><td>.*\\..*</td><td>监控规则正则表达式,多个规则以逗号分隔。如canal\\.w1代表监听canal库的w1表，.*\\..*代表监控所有库所有表。可不配置，之后在客户端里指定</td></tr><tr><td>canal.instance.filter.black.regex</td><td>可不指定</td><td>监控黑名单规则</td></tr></tbody></table><h2 id="启停"><a href="#启停" class="headerlink" title="启停"></a>启停</h2><p><strong>修改restart脚本</strong><br>进入canal bin目录</p><pre><code class="bash">#!/bin/bashcurrent_dir=`readlink -f $0 | xargs dirname`sh $current_dir/stop.shsh $current_dir/startup.sh</code></pre><p>通过以下脚本进行启停</p><p><img src="https://ws1.sinaimg.cn/large/c6073458gy1fv6inhxzp2j20cg01sa9y.jpg" alt="启动"></p><p><code>在另一台服务器同样执行以上操作</code></p><h2 id="运行状态查看"><a href="#运行状态查看" class="headerlink" title="运行状态查看"></a>运行状态查看</h2><p>进入zookeeper</p><pre><code class="bash">./zkCli.sh -server 172.16.40.201:2181</code></pre><p><img src="https://ws1.sinaimg.cn/large/c6073458gy1fv6itek973j20h701hdfq.jpg" alt></p><p>查看IMMIG_200实例正在运行的服务端</p><pre><code class="bash">get /otter/canal/destinations/IMMIG_200/running</code></pre><p><img src="https://ws1.sinaimg.cn/large/c6073458gy1fv6iv6zu26j20m106y3yy.jpg" alt></p><p>查看Canal集群节点</p><pre><code>ls /otter/canal/destinations/IMMIG_200/cluster</code></pre><p><img src="https://ws1.sinaimg.cn/large/c6073458gy1fv6iwirc1qj20lm01eq2u.jpg" alt></p><p>查看IMMIG_200实例当前消费位点</p><pre><code class="bash">get /otter/canal/destinations/IMMIG_200/1001/cursor</code></pre><p><img src="https://ws1.sinaimg.cn/large/c6073458gy1fv6ixkjioej20pc08k0th.jpg" alt></p><p>查看IMMIG_200实例监控规则</p><pre><code>get /otter/canal/destinations/IMMIG_200/1001/filter</code></pre><p><img src="https://ws1.sinaimg.cn/large/c6073458gy1fv6j01i9kdj20mk071gm0.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper集群部署</title>
      <link href="/2019/02/28/zookeeper%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/02/28/zookeeper%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h3><ul><li><strong>tickTime</strong><br>Zookeeper基本时间单位(ms)。心跳时间间隔等于tickTime；会话超时时间等于2倍tickTime。</li><li><strong>dataDir</strong><br>用于存储内存数据库快照。在没设置dataLogDir的情况下，还存储Zookeeper操作的事务日志。</li><li><strong>dataLogDir</strong><br>用于存储Zookeeper操作的事务日志。</li><li><strong>clientPort</strong><br>客户端连接的端口</li><li><strong>initLimit</strong><br>follower连接并同步到leader允许的最大时间间隔。数值为n个tickTime。</li><li><strong>syncLimit</strong><br>follower服务器与leader服务器之间信息同步允许的最大时间间隔。数值为n个tickTime。</li></ul><h3 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h3><pre><code>tickTime=2000initLimit=5syncLimit=2dataDir=/home/zookeeper/datadataLogDir=/home/zookeeper/logsclientPort=2181server.1=172.16.40.201:2888:3888server.2=172.16.40.202:2888:3888server.3=172.16.40.203:2888:3888</code></pre><blockquote><p><strong>端口说明</strong><br>1.2181: 对client提供服务<br>2.2888: 集群内机器通讯使用<br>3.3888: 选举leader使用 </p></blockquote><h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><p><em>3台zk服务器为例：ServerA、ServerB、ServerC</em>   </p><ol><li>分别在3台服务器创建dataDir，dataLogDir目录<pre><code class="bash">mkdir -p /home/zookeeper/datamkdir -p /home/zookeeper/logs</code></pre></li><li>分别在3台服务器下载并解压Zookeeper：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz" target="_blank" rel="noopener">下载</a>  <pre><code class="bash">tar -xzf zookeeper-3.4.13.tar.gz</code></pre></li><li>进入zookeeper目录，分别将 conf 目录下的 zoo_sample.cfg 复制一份重命名为 zoo201.cfg,zoo202.cfg,zoo203.cfg,并按照以上配置酌情修改。<pre><code class="bash">cp zoo_sample.cfg zoo201.cfgcp zoo_sample.cfg zoo202.cfgcp zoo_sample.cfg zoo203.cfg</code></pre></li><li><p>分别在data目录下新建myid</p><pre><code class="bash">echo &quot;1&quot; &gt; myidecho &quot;2&quot; &gt; myidecho &quot;3&quot; &gt; myid</code></pre><blockquote><p>server.X 这个数字就是对应，data/myid中的数字。在3个server的myid文件中分别写入了1，2，3，那么每个server中的zoo.cfg都配 server.1, server.2,server.3就行了。</p></blockquote></li><li><p>分别启动zookeeper</p><pre><code class="bash">bin/zkServer.sh start conf/zoo201.cfgbin/zkServer.sh start conf/zoo202.cfgbin/zkServer.sh start conf/zoo203.cfg</code></pre></li><li>测试是否启动了该Server，若回复imok表示已经启动<pre><code class="bash">echo ruok|nc 172.16.40.201 2181echo ruok|nc 172.16.40.202 2181echo ruok|nc 172.16.40.203 2181</code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3>连接到zk<pre><code class="bash">bin/zkCli.sh -server 172.16.40.201:2181bin/zkCli.sh -server 172.16.40.202:2181bin/zkCli.sh -server 172.16.40.203:2181</code></pre>查看 zk 的运行状态<pre><code class="bash">bin/zkServer.sh status 172.16.40.201:2181bin/zkServer.sh status 172.16.40.202:2181bin/zkServer.sh status 172.16.40.203:2181</code></pre>节点管理</li><li><strong>ls path:</strong> 查看当前 ZooKeeper 中所包含的内容</li><li><strong>create /zk myData:</strong> 创建一个新的 znode。这个命令创建了一个新的 znode 节点“ zk ”以及与它关联的字符串。</li><li><strong>get path:</strong> 获取该znode信息 </li><li><strong>set path data:</strong> 给znode设置值(前提是值存在)</li><li><strong>delete path:</strong> 删除该znode</li></ol><p>传递四个字母的字符串给ZooKeeper，ZooKeeper会返回一些有用的信息。例如:</p><pre><code class="bash">echo envi |nc 172.16.40.201 2181</code></pre><table><thead><tr><th>ZooKeeper四字命令</th><th>功能描述</th></tr></thead><tbody><tr><td>conf</td><td>输出相关服务配置的详细信息。</td></tr><tr><td>cons</td><td>列出所有连接到服务器的客户端的完全的连接/会话的详细信息。包括“接受/发送”的包数量、会话id、操作延迟、最后的操作执行等等信息。</td></tr><tr><td>dump</td><td>列出未经处理的会话和临时节点。</td></tr><tr><td>envi</td><td>输出关于服务环境的详细信息（区别于conf命令）。</td></tr><tr><td>reqs</td><td>列出未经处理的请求</td></tr><tr><td>ruok</td><td>测试服务是否处于正确状态。如果确实如此，那么服务返回“imok”，否则不做任何相应。</td></tr><tr><td>stat</td><td>输出关于性能和连接的客户端的列表。</td></tr><tr><td>wchs</td><td>列出服务器watch的详细信息。</td></tr><tr><td>wchc</td><td>通过session列出服务器watch的详细信息，它的输出是一个与watch相关的会话的列表。</td></tr><tr><td>wchp</td><td>通过路径列出服务器watch的详细信息。它输出一个与session相关的路径。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
